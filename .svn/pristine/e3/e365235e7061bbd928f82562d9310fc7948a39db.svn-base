package com.mintfish.ringpet;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.mintfish.ringpet.signup.SignupTypeActivity;
import com.mintfish.ringpet.util.HttpGetRequest;

public class MainActivity extends FragmentActivity
{
	private Boolean saved_bool = false;
	Handler mHandler = new Handler();
	private EditText login_id;
	private SharedPreferences pref;
	@Override
    protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
		
        LinearLayout lv = (LinearLayout) findViewById(R.id.lg_btn);
        TextView tv = (TextView) findViewById(R.id.lg_btn_sign);
        final CheckBox chk = (CheckBox) findViewById(R.id.lg_img_chk);
        login_id = (EditText) findViewById(R.id.lg_txt_id);
        final EditText login_pw = (EditText) findViewById(R.id.lg_txt_pw);
        pref = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
        String saved_id = pref.getString("id", null);
        String saved_pw = pref.getString("pw", null);
        
        if(saved_id != null && saved_pw != null)
        {
        	doLogin(saved_id, saved_pw);
        }
        
        chk.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				if(chk.isChecked() == false)
				{
					saved_bool = false;
				}else{
					saved_bool = true;
				}
			}
        });
        
        lv.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				String id = login_id.getText().toString();
				String pw = login_pw.getText().toString();
				
				if(id.equals("") || pw.equals(""))
				{
					showErrorAlert();
				}else{
					doLogin(id, pw);
				}
			}
        });
        
        tv.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				Intent intent = new Intent(MainActivity.this, SignupTypeActivity.class);
				intent.putExtra("noscreen", true);
				startActivity(intent);
			}
        });
   }
	
   private void showErrorAlert()
   {
	   AlertDialog.Builder builder = new AlertDialog.Builder(this);
	   builder.setTitle("확인");
	   builder.setMessage("아이디나 비밀번호를 입력해 주세요.");
	   builder.setNeutralButton("확인", new DialogInterface.OnClickListener() {
           public void onClick(DialogInterface dialog, int whichButton) {                                        
          }
       });
	   builder.show();
   }
   
   private void showFailedAlert()
   {
	   AlertDialog.Builder builder = new AlertDialog.Builder(this);
	   builder.setTitle("확인");
	   builder.setMessage("로그인에 실패하였습니다. 아이디나 비밀번호를 다시 확인해주세요.");
	   builder.setNeutralButton("확인", new DialogInterface.OnClickListener() {
           public void onClick(DialogInterface dialog, int whichButton) {                                        
          }
       });
	   builder.show();
   }
	
   private void doLogin(final String id, final String pw)
   {
	   final ProgressDialog dialog = ProgressDialog.show(this, "", "확인중입니다. 잠시만 기다려주십시오.", true);
	   new Thread() {
		   String name = "";
           String photo = "";
           int code = 0;
           Boolean login_success = false;
           public void run() {
        	   	try
	           	{
	           		String path = "http://api.ringpet.com/api/loginUser?id="+id+"&pw="+pw;
	           		HttpGetRequest hgr = new HttpGetRequest();
	                String url = hgr.getHTML(path);
	                try {
	                    JSONObject response = new JSONObject(url);
	                    JSONObject channel = response.getJSONObject("channel");
	                    String result_str = channel.getString("result").toString();
	                    //des_str = channel.getString("description").toString();
	                    JSONObject item = channel.getJSONObject("item");
	                    name = item.getString("name").toString();
	                    photo = item.getString("photo").toString();
	                    code = Integer.parseInt(result_str);
	
	                } catch (JSONException e) {
	                    Log.d("jsonexception", e.toString());
	                }
	
	                if(code==400){
	                	login_success = true;
	                }
	                else if(code==200){
	                	login_success = false;
	                }
	           		
	           	}catch(Exception e){
	        		e.printStackTrace();
	        	}
	        		
	        	mHandler.post(new Runnable() {
	        		public void run() {
	        			dialog.dismiss();
	        			dialog.hide();
	        			if(login_success == false)
	        			{
	        				showFailedAlert();
	        			}else{
	        				if(saved_bool == true)
	        				{
	        					SharedPreferences.Editor editor = pref.edit();
	        					editor.putString("id", id);
	        					editor.putString("pw", pw);
	        					editor.commit();
	        				}
	        				showMainActivty(id, pw, name, photo);
	        			}
	        		}
	        	});
        }
    }.start();
   }
   
	private void showMainActivty(String id, String pw, String name, String photo)
	{
		InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); 
		imm.hideSoftInputFromWindow(login_id.getWindowToken(), 0);
		Intent intent = new Intent(MainActivity.this, FrameActivity.class);
		intent.putExtra("id", id);
		intent.putExtra("pw", pw);
		intent.putExtra("name", name);
		intent.putExtra("photo", photo);
		intent.putExtra("noscreen", true);
		startActivity(intent);
		finish();
	}
}
