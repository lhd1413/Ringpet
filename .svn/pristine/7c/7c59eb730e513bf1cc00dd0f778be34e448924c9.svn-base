package com.mintfish.ringpet.notice;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;
import com.mintfish.ringpet.R;
import com.mintfish.ringpet.model.NoticeModel;
import com.mintfish.ringpet.model.ReviewModel;
import com.mintfish.ringpet.review.ReviewListFragment;
import com.mintfish.ringpet.review.ReviewListFragment.TestAdapter;
import com.mintfish.ringpet.util.HttpGetRequest;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

public class NoticeListFragment extends Fragment {
	
	private ArrayList<NoticeModel> lists;
	Handler mHandler = new Handler();
	
	@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        return inflater.inflate(R.layout.activity_notice, null);
    }
     
    @Override
    public void onActivityCreated(Bundle savedInstanceState)
    {
        super.onActivityCreated(savedInstanceState);
        loaddata();
    }
    
    private void loaddata()
    {
    	lists = new ArrayList<NoticeModel>();
    	final ProgressDialog dialog = ProgressDialog.show(getActivity(), "", "불러오는 중입니다. 잠시만 기다려주십시오.", true);
    	new Thread() {
 		   	public void run() {
         	   	try
 	           	{
 	           		String path = "http://api.ringpet.com/api/getNoticeList";
 	           		HttpGetRequest hgr = new HttpGetRequest();
 	                String url = hgr.getHTML(path);
 	                try {
 	                    JSONObject response = new JSONObject(url);
 	                    JSONObject channel = response.getJSONObject("channel");
 	                    //des_str = channel.getString("description").toString();
 	                    JSONArray array = channel.getJSONArray("item");
 	                    int length = array.length();
 	                    lists = new ArrayList<NoticeModel>();
 	                    for(int i = 0; i < length; i++)
 	                    {
 	                    	NoticeModel lModel = new NoticeModel();
 	                    	JSONObject item = array.getJSONObject(i);
 	                    	lModel.setNoticeContent(item.getString("notice_content").toString());
 	                    	lModel.setNoticeId(item.getString("notice_id").toString());
 	                    	lModel.setNoticeRegDate(item.getString("notice_reg_date").toString());
 	                    	lModel.setNoticeTitle(item.getString("notice_title").toString());
 	                    	lists.add(lModel);
 	                    }
 	
 	                } catch (JSONException e) {
 	                    Log.d("jsonexception", e.toString());
 	                }

 	           	}catch(Exception e){
 	        		e.printStackTrace();
 	        	}
 	        		
 	        	mHandler.post(new Runnable() {
 	        		public void run() {
 	        			dialog.dismiss();
 	        			dialog.hide();
 	        			setListView();
 	        		}
 	        	});
            }
    	}.start();	
    }
    
    private void setListView()
    {
    	ListView listView = (ListView)getView().findViewById(R.id.listView1);
        TestAdapter b1_adapter = new TestAdapter(this.getActivity(), R.layout.item_notice, lists);
		listView.setAdapter(b1_adapter);
		
		listView.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id)                
            {
            	NoticeModel nm = lists.get(position);
            	NoticeDetailFragment sif =  new NoticeDetailFragment();
            	sif.setNoticeModel(nm);
            	FragmentTransaction ft = getFragmentManager().beginTransaction();
				ft.replace(R.id.fragment1, sif);
		        ft.setTransition(FragmentTransaction.TRANSIT_NONE);
		        ft.addToBackStack(null);
		        ft.commit();
            }
        });
    }
    
    public class TestAdapter extends ArrayAdapter<NoticeModel>{
    	public ArrayList<NoticeModel> items;
    	
    	public TestAdapter(Context context, int textViewResourceId, ArrayList<NoticeModel> items) {
            super(context, textViewResourceId, items);
        	this.items = items;
    	}
    	
    	@Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View v = convertView;
            if (v == null) {
            	LayoutInflater vi = (LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                v = vi.inflate(R.layout.item_notice, null);
            }
            
            NoticeModel areaInfo = items.get(position);
            
            if (areaInfo != null) {
            	TextView title = (TextView) v.findViewById(R.id.im_notice_title);
                TextView description = (TextView) v.findViewById(R.id.im_notice_description);
                title.setText(areaInfo.getNoticeTitle());
                String desc = areaInfo.getNoticeContent().replace("<br/>", " ");
                description.setText(desc);
            }
            return v;
        }
    	
    }

}